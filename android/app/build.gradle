apply plugin: 'com.android.application'

android {
    namespace "com.qyl.quanyouliao"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.qyl.quanyouliao"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 3
        versionName "4.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs {
        release {
            storeFile file("release.keystore")
            storePassword System.getenv("SIGNING_STORE_PASSWORD")
            keyAlias System.getenv("SIGNING_KEY_ALIAS")
            keyPassword System.getenv("SIGNING_KEY_PASSWORD")
        }
        // release {
        //     def storeFilePath = System.getenv("ANDROID_KEYSTORE") ?: project.findProperty("android.injected.signing.store.file")
        //     def storePass = System.getenv("ANDROID_KEYSTORE_PASSWORD") ?: project.findProperty("android.injected.signing.store.password")
        //     def keyAlias = System.getenv("ANDROID_KEY_ALIAS") ?: project.findProperty("android.injected.signing.key.alias")
        //     def keyPass = System.getenv("ANDROID_KEY_PASSWORD") ?: project.findProperty("android.injected.signing.key.password")

        //     if (storeFilePath && storePass && keyAlias && keyPass) {
        //         storeFile file(storeFilePath)
        //         storePassword storePass
        //         keyAlias keyAlias
        //         keyPassword keyPass
        //     } else {
        //         def debugKeystore = file(System.getProperty("user.home") + "/.android/debug.keystore")
        //         if (debugKeystore.exists()) {
        //             storeFile debugKeystore
        //             storePassword = "android"
        //             keyAlias = "androiddebugkey"
        //             keyPassword = "android"
        //         } else {
        //             // CI环境调试构建可禁用签名
        //         }
        //     }
        // }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
    // Start.io (StartApp) Android SDK
    implementation 'com.startapp:inapp-sdk:5.+'
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
