name: Build Android APK

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: 'Build Type (debug or release)'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 安装依赖
        run: npm install

      - name: 构建前端
        run: npm run build

      - name: 安装 Capacitor 依赖
        run: npx cap sync android

      - name: 设置 JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: 检查 gradlew 是否存在
        working-directory: android
        run: ls -l gradlew

      - name: 授权 gradlew
        working-directory: android
        run: chmod +x gradlew

      # 仅在 release 构建时还原 keystore
      - name: 还原 keystore 文件
        if: ${{ github.event.inputs.buildType == 'release' }}
        env:
          SIGNING_KEY_STORE_PATH: ${{ secrets.SIGNING_KEY_STORE_PATH }} # 例如：android/app/release.keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > $SIGNING_KEY_STORE_PATH

      - name: 构建 APK
        working-directory: android
        env:
          SIGNING_KEY_STORE_PATH: ${{ secrets.SIGNING_KEY_STORE_PATH }}
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        run: |
          ./gradlew --stop
          if [ "${{ github.event.inputs.buildType }}" = "release" ]; then
            ./gradlew assembleRelease
          else
            ./gradlew assembleDebug
          fi

      # 上传 APK（push 和 debug 都上传 debug 包，只有 release 参数才上传 release 包）
      - name: 上传 APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.buildType == 'release' && 'app-release.apk' || 'app-debug.apk' }}
          path: |
            android/app/build/outputs/apk/release/app-release.apk
            android/app/build/outputs/apk/debug/app-debug.apk

      # 邮件通知（无论成功失败都会运行）
      - name: 发送构建成功通知
        if: always() # 确保无论构建成功或失败都发送通知
        uses: dawidd6/action-send-mail@v4
        with:
          server_address: smtp.qq.com
          server_port: 465
          username: ${{ secrets.QQ_EMAIL }}
          password: ${{ secrets.QQ_EMAIL_PASSWORD }}
          subject: ${{ steps.build.outcome == 'success' && '✅ 构建成功' || '❌ 构建失败' }} - ${{ github.repository }}
          body: |
            <h2>${{ steps.build.outcome == 'success' && '✅ APK构建成功' || '❌ APK构建失败' }}</h2>
            <p><strong>仓库:</strong> ${{ github.repository }}</p>
            <p><strong>分支:</strong> ${{ github.ref }}</p>
            <p><strong>提交:</strong> <a href="https://github.com/${{ github.repository }}/commit/${{ github.sha }}">${{ github.sha }}</a></p>
            <p><strong>工作流详情:</strong> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">点击查看</a></p>
  
            ${{ steps.build.outcome == 'success' && '
            <p>您可以在GitHub Actions的"Artifacts"部分下载APK文件。</p>
            ' || '
            <p style="color:red">构建过程出现错误，请检查日志。</p>
            ' }}

            <p>触发时间: ${{ github.event.head_commit.timestamp || github.run_started_at }}</p>
            <hr>
            <p style="font-size:12px;color:#999">此邮件由GitHub Actions自动发送，请勿回复。</p>
          to: ${{ secrets.QQ_EMAIL }}
          from: ${{ secrets.QQ_EMAIL }}
          content_type: text/html
        
