name: Build Android APK

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: 'Build Type (debug or release)'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 安装依赖
        run: npm install

      - name: 构建前端
        run: npm run build

      - name: 安装 Capacitor 依赖
        run: npx cap sync android

      - name: 设置 JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: 检查 gradlew 是否存在
        working-directory: android
        run: ls -l gradlew

      - name: 授权 gradlew
        working-directory: android
        run: chmod +x gradlew

      # 生成调试签名（仅debug构建）
      - name: 生成调试签名
        if: ${{ github.event.inputs.buildType != 'release' }}
        run: |
          mkdir -p ~/.android/
          keytool -genkeypair \
            -alias androiddebugkey \
            -keypass android \
            -storepass android \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US" \
            -keystore ~/.android/debug.keystore

      # 仅在 release 构建时还原 keystore
      - name: 还原 keystore 文件
        if: ${{ github.event.inputs.buildType == 'release' }}
        env:
          SIGNING_KEY_STORE_PATH: ${{ secrets.SIGNING_KEY_STORE_PATH }} # 例如：android/app/release.keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > $SIGNING_KEY_STORE_PATH

      # 添加文件检查步骤
      - name: 检查 keystore file
        if: ${{ github.event.inputs.buildType =='release' }}
        env:
          SIGNING_KEY_STORE_PATH: ${{ secrets.SIGNING_KEY_STORE_PATH }} # 例如：android/app/release.keystore
        run: |
          echo "Checking keystore file existence..."
          ls -l $SIGNING_KEY_STORE_PATH
          echo "File type check..."
          file $SIGNING_KEY_STORE_PATH
          echo "File size check..."
          stat -c %s $SIGNING_KEY_STORE_PATH

      # 构建 APK（push 和 debug 都走 debug，只有 release 参数才走 release）
      - name: 构建 APK
        working-directory: android
        run: |
          ./gradlew --stop
          if [ "${{ github.event.inputs.buildType }}" = "release" ]; then
            ./gradlew assembleRelease --info --stacktrace \
              -Pandroid.injected.signing.store.file=release.keystore \
              -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
              -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
              -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}
          else
            ./gradlew assembleDebug --info --stacktrace
          fi

      # 上传 APK（push 和 debug 都上传 debug 包，只有 release 参数才上传 release 包）
      - name: 上传 APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.buildType == 'release' && 'app-release.apk' || 'app-debug.apk' }}
          path: |
            android/app/build/outputs/apk/release/app-release.apk
            android/app/build/outputs/apk/debug/app-debug.apk
